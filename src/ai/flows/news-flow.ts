
'use server';

/**
 * @fileOverview A flow for fetching compliance news, from a real news API or generated by an AI prompt as a fallback.
 *
 * - fetchComplianceNews - A function that returns a list of compliance news items.
 * - ComplianceNewsOutput - The return type for the fetchComplianceNews function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import type { NewsItem } from '@/types/compliance';
import fetch from 'node-fetch';


// Define the output schema based on the NewsItem type.
const ComplianceNewsOutputSchema = z.array(
  z.object({
    id: z.string().describe("Un identifiant unique pour l'actualité, ex: 'news-1'."),
    title: z.string().describe("Le titre de l'article de presse."),
    date: z.string().describe("La date de publication au format AAAA-MM-JJ."),
    source: z.enum(["CGA", "JORT", "GAFI", "OFAC", "UE", "Autre"]).describe("La source de l'information."),
    description: z.string().describe("Une courte description (1-2 phrases) de l'actualité."),
    url: z.string().url().optional().describe("L'URL vers l'article complet, si disponible."),
    imageUrl: z.string().url().optional().describe("L'URL d'une image pour l'article."),
  })
).length(5).describe("Une liste de 5 articles d'actualité sur la conformité.");

export type ComplianceNewsOutput = z.infer<typeof ComplianceNewsOutputSchema>;

// This is the main exported function that the UI will call.
export async function fetchComplianceNews(): Promise<ComplianceNewsOutput> {
  return fetchComplianceNewsFlow();
}

const newsPrompt = ai.definePrompt({
    name: 'newsPrompt',
    input: { schema: z.void() },
    output: { schema: ComplianceNewsOutputSchema },
    prompt: `Tu es un expert en veille réglementaire pour le secteur de l'assurance en Tunisie.
Ta mission est de générer une liste de 5 actualités récentes et pertinentes (fictives mais plausibles) concernant la conformité, la lutte anti-blanchiment (LAB-FT).
Assure-toi que les sources (GAFI, OFAC, UE, CGA, JORT) sont variées et que les dates sont récentes, étalées sur les 2-3 derniers mois.
Le contenu doit être spécifiquement pertinent pour un responsable de la conformité dans une compagnie d'assurance.
Fournis la réponse uniquement dans le format JSON demandé.`,
});

const mapSourceToEnum = (sourceName: string): NewsItem['source'] => {
  const lowerSourceName = sourceName.toLowerCase();
  if (lowerSourceName.includes('cga')) return 'CGA';
  if (lowerSourceName.includes('jort')) return 'JORT';
  if (lowerSourceName.includes('fatf') || lowerSourceName.includes('gafi')) return 'GAFI';
  if (lowerSourceName.includes('ofac')) return 'OFAC';
  if (lowerSourceName.includes('european union') || lowerSourceName.includes('ue')) return 'UE';
  return 'Autre';
};


const fetchComplianceNewsFlow = ai.defineFlow(
  {
    name: 'fetchComplianceNewsFlow',
    inputSchema: z.void(),
    outputSchema: ComplianceNewsOutputSchema,
  },
  async () => {
    
    // --- Integration with GNews API ---
    const GNEWS_API_KEY = process.env.GNEWS_API_KEY;

    if (!GNEWS_API_KEY) {
      console.warn("Clé API GNews non configurée (GNEWS_API_KEY). Utilisation du prompt IA en fallback.");
      const { output } = await newsPrompt();
      return output || [];
    }

    try {
        const query = encodeURIComponent('"conformité assurance" OR "lutte anti-blanchiment" OR "insurance compliance" OR "aml"');
        const url = `https://gnews.io/api/v4/search?q=${query}&lang=fr,en&country=fr,us&topic=business&max=5&apikey=${GNEWS_API_KEY}`;
        
        const response = await fetch(url);
        
        if (!response.ok) {
            console.error("Erreur lors de la récupération des actualités depuis GNews:", await response.text());
            const { output } = await newsPrompt(); // Fallback to AI
            return output || [];
        }

        const newsData = await response.json() as any;

        if (!newsData.articles || newsData.articles.length === 0) {
           console.warn("GNews n'a retourné aucun article, utilisation du prompt IA en fallback.");
           const { output } = await newsPrompt();
           return output || [];
        }

        const realNews: NewsItem[] = newsData.articles.slice(0, 5).map((article: any, index: number) => ({
            id: article.url || `real-news-${index}`,
            title: article.title,
            date: article.publishedAt.split('T')[0], // Format YYYY-MM-DD
            source: mapSourceToEnum(article.source.name),
            description: article.description,
            url: article.url,
            imageUrl: article.image,
        }));
        
        // Ensure we always return 5 items, supplementing with AI if necessary
        if (realNews.length < 5) {
            console.warn(`GNews a retourné seulement ${realNews.length} articles. Complément avec l'IA.`);
            const { output: aiNews } = await newsPrompt();
            if (aiNews) {
                const needed = 5 - realNews.length;
                return [...realNews, ...aiNews.slice(0, needed)];
            }
        }
        
        return realNews;

    } catch (error) {
        console.error("Erreur lors de la connexion à GNews, utilisation du prompt IA en fallback:", error);
        const { output } = await newsPrompt();
        return output || [];
    }
  }
);
