'use server';

/**
 * @fileOverview A flow for fetching compliance news, generated by an AI prompt.
 *
 * - fetchComplianceNews - A function that returns a list of compliance news items.
 * - ComplianceNewsOutput - The return type for the fetchComplianceNews function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import type { NewsItem } from '@/types/compliance';

// Define the output schema based on the NewsItem type.
const ComplianceNewsOutputSchema = z.array(
  z.object({
    id: z.string().describe("Un identifiant unique pour l'actualité, ex: 'news-1'."),
    title: z.string().describe("Le titre de l'article de presse."),
    date: z.string().describe("La date de publication au format AAAA-MM-JJ."),
    source: z.enum(["CGA", "JORT", "GAFI", "OFAC", "UE", "Autre"]).describe("La source de l'information."),
    description: z.string().describe("Une courte description (1-2 phrases) de l'actualité."),
    url: z.string().optional().describe("L'URL vers l'article complet, si disponible."),
  })
).length(5).describe("Une liste de 5 articles d'actualité sur la conformité.");

export type ComplianceNewsOutput = z.infer<typeof ComplianceNewsOutputSchema>;

// This is the main exported function that the UI will call.
export async function fetchComplianceNews(): Promise<ComplianceNewsOutput> {
  return fetchComplianceNewsFlow();
}

const newsPrompt = ai.definePrompt({
    name: 'newsPrompt',
    input: { schema: z.void() },
    output: { schema: ComplianceNewsOutputSchema },
    prompt: `Tu es un expert en veille réglementaire pour le secteur de l'assurance en Tunisie.
Ta mission est de générer une liste de 5 actualités récentes et pertinentes (fictives mais plausibles) concernant la conformité, la lutte anti-blanchiment (LAB-FT).
Assure-toi que les sources (GAFI, OFAC, UE, CGA, JORT) sont variées et que les dates sont récentes, étalées sur les 2-3 derniers mois.
Le contenu doit être spécifiquement pertinent pour un responsable de la conformité dans une compagnie d'assurance.
Fournis la réponse uniquement dans le format JSON demandé.`,
});

const fetchComplianceNewsFlow = ai.defineFlow(
  {
    name: 'fetchComplianceNewsFlow',
    inputSchema: z.void(),
    outputSchema: ComplianceNewsOutputSchema,
  },
  async () => {
    // ====================================================================================
    // NOTE POUR LE DÉVELOPPEUR : Intégration d'une API d'actualités réelles
    // ====================================================================================
    // Pour passer à des données réelles, suivez ces étapes :
    // 1. Obtenez une clé API d'un service comme NewsAPI.org ou GNews.
    // 2. Stockez-la dans vos variables d'environnement (ex: process.env.NEWS_API_KEY).
    // 3. Décommentez et adaptez le code ci-dessous.
    // 4. Commentez ou supprimez l'appel au `newsPrompt` qui génère des données fictives.
    // ====================================================================================

    /*
    // --- EXEMPLE D'INTÉGRATION AVEC UNE API D'ACTUALITÉS ---

    const NEWS_API_KEY = process.env.NEWS_API_KEY;
    if (!NEWS_API_KEY) {
      console.error("Clé API pour les actualités non configurée.");
      // Retourner des données vides ou générées par l'IA comme fallback
      const { output } = await newsPrompt();
      return output || [];
    }

    // Interroger l'API d'actualités
    const query = encodeURIComponent('"conformité assurance" OR "lutte anti-blanchiment" OR "regulatory compliance insurance"');
    const newsApiResponse = await fetch(
      `https://newsapi.org/v2/everything?q=${query}&language=fr&sortBy=publishedAt&apiKey=${NEWS_API_KEY}`
    );

    if (!newsApiResponse.ok) {
      console.error("Erreur lors de la récupération des actualités:", await newsApiResponse.text());
      return [];
    }

    const newsApiData = await newsApiResponse.json();

    // Transformer les données de l'API pour correspondre à notre type NewsItem
    // Ici, on pourrait utiliser une autre étape d'IA pour résumer ou mieux catégoriser les articles
    const realNews: NewsItem[] = newsApiData.articles.slice(0, 5).map((article: any, index: number) => ({
      id: `real-news-${index}`,
      title: article.title,
      date: article.publishedAt.split('T')[0], // Format YYYY-MM-DD
      source: article.source.name, // Adapter selon la réponse de l'API
      description: article.description,
      url: article.url,
    }));
    
    return realNews;
    */

    // Pour l'instant, nous continuons d'utiliser le prompt pour générer des données.
    const { output } = await newsPrompt();
    if (!output) {
      return [];
    }
    // Trier les actualités par date pour s'assurer que les plus récentes sont en premier
    const sortedNews = [...output].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
    return sortedNews;
  }
);
